//func (c *Client) LabelCardName() string {
//	return c.config.LabelCardName
//}

//
//func (c *Client) getCardsByName(cardName string) ([]*trello.Card, error) {
//	trelloCards, err := c.client.SearchCards(fmt.Sprintf("board:%s \"%s\"", c.board.ID, cardName), trello.Defaults())
//	if err != nil {
//		return nil, errors.Wrapf(err, "error looking up card \"%s\"", cardName)
//	}
//	cards := make([]*trello.Card, len(trelloCards))
//	for idx, trelloCard := range trelloCards {
//		cards[idx] = trelloCard
//	}
//	return cards, nil
//}
//

//
//func (c *Client) updateCard(card *trello.Card, desc string, labelIds string) error {
//	fmt.Printf("\tUpdating card for issue \"%s\" on list \"%s\" with labels \"%s\"\n", card.Name, card.IDList, labelIds)
//	err := card.Update(map[string]string{
//		"desc":     desc,
//		"idLabels": labelIds,
//	})
//	if err != nil {
//		switch errors.Cause(err).(type) {
//		case *trello.ErrorURLLengthExceeded:
//			if err = card.Update(map[string]string{
//				"idLabels": labelIds,
//			}); err != nil {
//				return err
//			}
//			fmt.Printf(
//				"[WARNING] Unable to automatically update card for issue \"%s\""+
//					"- request URL exceeded maximum length allowed.\n"+
//					"Issue updated with no desc.\n",
//				card.Name,
//			)
//			return nil
//		default:
//			return errors.Wrapf(err, "unable to update card \"%s\"", card.Name)
//		}
//	}
//	return nil
//}
//
//
//func (c *Client) CreateOrUpdateCardInstancesByActions(card *trello.Card, actionConfig Actions) (bool, error) {
//	// See if any cards on the board for this issue already exist
//	cards, err := c.GetCardsByName(card.Name)
//	if err != nil {
//		return false, err
//	}
//
//	// if no cards for this issue exist yet
//	if len(cards) == 0 {
//		// create one card for each configured list
//		for _, listName := range actionConfig.Create.Lists {
//			// create it
//			card.IDList = c.listIDMap[listName]
//			if err = c.CreateCard(card, actionConfig.Create.Labels); err != nil {
//				return false, errors.Wrapf(err, "Error creating card for issue \"%s\"", card.Name)
//			}
//		}
//	} else { // if cards for this issue exist
//		// update them all to mirror issue text
//		newActivity, err := c.updateCardInstances(card, cards, actionConfig, c.getCardsByIDs(cards))
//		if err != nil {
//			return false, errors.Wrapf(err, "Error updating cards for issue \"%s\"", card.Name)
//		}
//		return newActivity, nil
//	}
//	return true, nil
//}
//
//
//func (c *Client) getCardInList(card *trello.Card, listName string) (*Card, error) {
//	trelloCards, err := c.client.SearchCards(fmt.Sprintf("board:%s \"%s\"", c.board.ID, card.Name), trello.Defaults())
//	if err != nil {
//		return nil, errors.Wrapf(err, "error looking up card \"%s\"", card.Name)
//	}
//	for _, trelloCard := range trelloCards {
//		if trelloCard.IDList == c.listIDMap[listName] {
//			return &Card{trelloCard: trelloCard}, nil
//		}
//	}
//	return nil, nil
//}
//
//func (c *Client) CloseCards(cardInstances []*Card, actionConfig Actions) error {
//	tempCard := cardInstances[0]
//	// create closed cards in closed lists
//	for _, listName := range actionConfig.Close.Lists {
//		tempCard.trelloCard.IDList = c.listIDMap[listName]
//		if err := c.CreateCard(tempCard.trelloCard, actionConfig.Close.Labels); err != nil {
//			return err
//		}
//	}
//
//	// delete all other card instances
//	for _, cardInstance := range cardInstances {
//		if err := c.client.DeleteCard(cardInstance.trelloCard); err != nil {
//			return err
//		}
//	}
//	return nil
//}
//
//func (c *Client) GetCardInstancesByName() (map[string][]*Card, error) {
//	cards, err := c.board.GetCards(trello.Defaults())
//	if err != nil {
//		return nil, errors.Wrapf(err, "Failed to get cards for board %s", c.board.ID)
//	}
//	cardMap := map[string][]*Card{}
//	for _, card := range cards {
//		_, ok := cardMap[card.Name]
//		if !ok {
//			cardMap[card.Name] = []*Card{{trelloCard: card}}
//		} else {
//			cardMap[card.Name] = append(cardMap[card.Name], &Card{trelloCard: card})
//		}
//	}
//	return cardMap, nil
//}
//
//func (c *Client) SyncCardComments(storageCard *storage.Card, comments []*storage.Comment) (bool, error) {
//	fmt.Printf("\t\tSyncing comments for trello card %s on list %s\n", storageCard.Title, storageCard.ListId)
//
//	card := c.NewCard(storageCard)
//
//	// Find existing comments for this card
//	cardCommentActions, err := card.GetActions(
//		map[string]string{
//			"filter": "commentCard",
//		},
//		nil
//	)
//	if err != nil {
//		return false, errors.Wrapf(err, "Error getting comments for card \"%s\"", c.trelloCard.ID)
//	}
//
//	newActivity, err := c.syncComments(cardCommentActions, comments, labelIDs)
//	if err != nil {
//		return false, errors.Wrapf(err, "Error syncing comments for card \"%s\"", c.trelloCard.ID)
//	}
//	return newActivity, nil
//}
//
//
//// don't write out to lists on an update unless content has changed
//func (c *Client) updateCardInstances(newCard *trello.Card, OldCards []*Card, actionConfig Actions, cardMap map[string]*Card) (bool, error) {
//	newActivity := false
//	for _, oldCard := range OldCards {
//		if newCard.Desc != oldCard.trelloCard.Desc {
//			if err := c.updateCard(oldCard.trelloCard, newCard.Desc, actionConfig.Update.Labels); err != nil {
//				return false, errors.Wrapf(err, "Error updating card \"%s\" for issue \"%s\"", newCard.ID, newCard.Name)
//			}
//		}
//		newActivity = true
//		// transfer old card to new card here to grab the client obj from the old card obj
//		oldCard.trelloCard.Desc = newCard.Desc
//		newCard = oldCard.trelloCard
//	}
//	return newActivity, nil
//}
//
//func (c *Client) getCardsByIDs(cards []*Card) map[string]*Card {
//	// Index cards by list ID to check for their existence on the board's lists
//	cardsByListID := map[string]*Card{}
//	for _, card := range cards {
//		cardsByListID[card.trelloCard.IDList] = card
//	}
//	return cardsByListID
//}